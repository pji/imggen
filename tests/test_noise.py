"""
test_noise
~~~~~~~~~~

Unit tests for the rasty.noise module.
"""
import numpy as np

from rasty import noise as n
from tests.common import SourceTestCase


# Test cases.
class NoiseTestCase(SourceTestCase):
    def test_noise_fill(self):
        """When given the size of an array, return an array that
        contains randomly generated noise.
        """
        # Expected value.
        exp = np.array([
            [
                [0xb6, 0xe0, 0xc4, 0x94, 0x3e, 0x0a, 0xc6, 0x8c],
                [0xb2, 0x14, 0x1f, 0x1f, 0x3e, 0x2e, 0x08, 0x92],
                [0xaa, 0xb6, 0x9d, 0x57, 0xf4, 0xb7, 0xba, 0x1c],
                [0x52, 0x89, 0xe5, 0xdb, 0x7d, 0xc7, 0x52, 0x2b],
                [0x15, 0xc4, 0xb9, 0x46, 0xca, 0x44, 0x01, 0xae],
                [0x48, 0xee, 0x63, 0x8b, 0xf7, 0xbc, 0xa5, 0x0a],
                [0x8c, 0x21, 0xf7, 0x71, 0x99, 0x2c, 0xa9, 0x8a],
                [0x99, 0xa8, 0xba, 0xd9, 0x0b, 0xd8, 0x85, 0xc9],
            ],
            [
                [0xe4, 0x10, 0xc0, 0xf3, 0xf5, 0x17, 0xf4, 0x93],
                [0xd7, 0x72, 0x80, 0xd2, 0x6a, 0xc8, 0x5d, 0xee],
                [0xb7, 0xce, 0x10, 0x27, 0x7d, 0x7f, 0xe5, 0xfd],
                [0x5d, 0x91, 0xb4, 0x01, 0x78, 0x02, 0x5d, 0x1b],
                [0x04, 0x20, 0xb8, 0x23, 0x50, 0xc2, 0x67, 0x45],
                [0x94, 0x12, 0x72, 0x00, 0x67, 0x22, 0x63, 0xa4],
                [0x66, 0x79, 0x77, 0xa5, 0xf8, 0xcf, 0x46, 0xc2],
                [0xe6, 0x73, 0xa0, 0xa5, 0xb4, 0x16, 0x04, 0x4c],
            ],
        ], dtype=np.uint8)
        
        # Test data and state.
        cls = n.Noise
        kwargs = {'seed': 'spam'}
        
        # Run test and determine result.
        self.fill_test(exp, cls, kwargs)

    def test_noise_accepts_int_as_seed(self):
        """Noise should accept an integer as a seed value."""
        # Expected value.
        exp = np.array([
            [
                [0xad, 0x0d, 0x38, 0x2f, 0x2c, 0xcf, 0xeb, 0x46],
                [0xd1, 0xe2, 0x82, 0x3e, 0xd2, 0x36, 0xbd, 0xa0],
                [0xec, 0x3b, 0xcb, 0x84, 0x3b, 0x2a, 0x7e, 0x94],
                [0x2f, 0x03, 0x78, 0xb9, 0xea, 0x9f, 0xe9, 0xdc],
                [0x37, 0xdc, 0xba, 0x46, 0xcb, 0xdc, 0x4c, 0x86],
                [0x12, 0x94, 0x3c, 0xc3, 0x2c, 0x4f, 0x03, 0x08],
                [0x7e, 0x77, 0x20, 0x41, 0x00, 0x61, 0x92, 0x6c],
                [0xd4, 0x9d, 0x43, 0xce, 0x7f, 0xc1, 0x90, 0x6f],
            ],
            [
                [0x65, 0x05, 0x77, 0x9f, 0xf1, 0x6f, 0x7b, 0x84],
                [0x68, 0x93, 0x11, 0x7c, 0x9b, 0xbd, 0x6d, 0x4d],
                [0x01, 0xc0, 0x13, 0x7c, 0x4d, 0xd6, 0xf2, 0x51],
                [0xe4, 0x56, 0xcf, 0xcb, 0xa7, 0x3a, 0x23, 0x6c],
                [0x26, 0xde, 0x2d, 0x07, 0x8e, 0x6d, 0xda, 0x29],
                [0x5b, 0xa3, 0xed, 0x42, 0xaf, 0x26, 0xbc, 0x4a],
                [0x3e, 0x3a, 0x5e, 0x53, 0x9c, 0x8a, 0xbf, 0x4b],
                [0xf4, 0x8a, 0xad, 0xaf, 0x26, 0x24, 0x75, 0x85],
            ],
        ], dtype=np.uint8)
        
        # Test data and state.
        cls = n.Noise
        kwargs = {'seed': 123}
        
        # Run test and determine result.
        self.fill_test(exp, cls, kwargs)        
    
    def test_noise_accepts_bytes_as_seed(self):
        """Noise should accept a bytes as a seed value."""
        # Expected value.
        exp = np.array([
            [
                [0xde, 0x2c, 0xa9, 0xfc, 0x13, 0x33, 0x5d, 0xdc],
                [0x7f, 0xf6, 0x36, 0x03, 0x64, 0xda, 0x33, 0x47],
                [0x05, 0x40, 0x71, 0xe8, 0xdd, 0xc3, 0xc2, 0xf2],
                [0x01, 0x43, 0xdb, 0xfd, 0x09, 0xc2, 0x56, 0x89],
                [0x33, 0xcf, 0x53, 0x5e, 0x48, 0x9e, 0x19, 0xf2],
                [0x47, 0xa9, 0xa4, 0x12, 0x6c, 0x56, 0xc8, 0xfd],
                [0x5b, 0x53, 0xd2, 0xc0, 0x6b, 0x1a, 0x40, 0xc9],
                [0xd3, 0xae, 0x92, 0xd9, 0xee, 0x79, 0xa6, 0x76],
            ],
            [
                [0xde, 0x43, 0x7e, 0x32, 0xbd, 0x4d, 0x9a, 0xce],
                [0x56, 0xa4, 0xdf, 0x0b, 0x48, 0x3d, 0xb6, 0xeb],
                [0xca, 0x73, 0xc6, 0xc0, 0x50, 0xd8, 0x48, 0xe1],
                [0x03, 0x69, 0xeb, 0xe4, 0xb5, 0xf7, 0xfe, 0x85],
                [0xd7, 0x20, 0x2b, 0x77, 0xf8, 0x83, 0xe5, 0x40],
                [0x31, 0x37, 0x3a, 0x08, 0xab, 0x85, 0x07, 0x92],
                [0x66, 0xbe, 0xe2, 0x54, 0x0b, 0x87, 0x84, 0x04],
                [0x39, 0x7d, 0xad, 0xca, 0x9a, 0x01, 0xe0, 0xed],
            ],
        ], dtype=np.uint8)
        
        # Test data and state.
        cls = n.Noise
        kwargs = {'seed': b'\x00\x01\x02\x03'}
        
        # Run test and determine result.
        self.fill_test(exp, cls, kwargs)        
    
    def test_noise_with_different_seed_has_different_noise(self):
        """When given different seeds, two instances of Noise
        should return different noise.
        """
        # Test data and state.
        seed_a = 'spam'
        seed_b = 'eggs'
        size = (2, 8, 8)
        src_a = n.Noise(seed_a)
        src_b = n.Noise(seed_b)
        
        # Run test.
        a = src_a.fill(size)
        b = src_b.fill(size)

        # Determine test result.
        self.assertArrayNotEqual(a, b)

    def test_noise_with_same_seed_repeats_noise(self):
        """When given the same seed, two instances of Noise
        should return the same noise.
        """
        # Test data and state.
        seed = 'spam'
        size = (2, 8, 8)
        src_a = n.Noise(seed)
        src_b = n.Noise(seed)
        
        # Run test.
        a = src_a.fill(size)
        b = src_b.fill(size)

        # Determine test result.
        self.assertArrayEqual(a, b)

    def test_noise_without_seed_not_repeat_noise(self):
        """When given the no seeds, two instances of Noise
        should return different noise.
        """
        # Test data and state.
        size = (2, 8, 8)
        src_a = n.Noise()
        src_b = n.Noise()
        
        # Run test.
        a = src_a.fill(size)
        b = src_b.fill(size)

        # Determine test result.
        self.assertArrayNotEqual(a, b)