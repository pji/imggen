"""
test_maze
~~~~~~~~~~

Unit tests for the rasty.maze module.
"""
import numpy as np

from rasty import maze as m
from tests.common import SourceTestCase


# Test cases.
class MazeTestCase(SourceTestCase):
    def test_maze_fill(self):
        """When given the size of an array, return an array of that
        size filled with a maze.
        """
        # Expected value.
        exp = np.array([
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
        ], dtype=np.uint8)
        
        # Test data and state.
        cls = m.Maze
        kwargs = {
            'width': .34,
            'unit': (1, 3, 3),
            'seed': 'spam',
        }
        
        # Run test and determine result.
        self.fill_test(exp, cls, kwargs)

    def test_maze_fill_origin_br_zero_inset(self):
        """When given that the origin should be in the middle of
        the fill, the maze's path should start being drawn from
        the bottom right of the fill.
        """
        # Expected value.
        exp = np.array([
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
            ],
        ], dtype=np.uint8)
        
        # Test data and state.
        cls = m.Maze
        kwargs = {
            'width': .34,
            'inset': (0, 0, 0),
            'origin': 'br',
            'unit': (1, 3, 3),
            'seed': 'spam',
        }
        
        # Run test and determine result.
        self.fill_test(exp, cls, kwargs)

    def test_maze_fill_origin_mm_zero_inset(self):
        """When given that the origin should be in the middle of
        the fill, the maze's path should start being drawn from
        the middle of the fill.
        """
        # Expected value.
        exp = np.array([
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff],
            ],
        ], dtype=np.uint8)
        
        # Test data and state.
        cls = m.Maze
        kwargs = {
            'width': .34,
            'inset': (0, 0, 0),
            'origin': 'mm',
            'unit': (1, 3, 3),
            'seed': 'spam',
        }
        
        # Run test and determine result.
        self.fill_test(exp, cls, kwargs)

    def test_maze_fill_origin_tl_zero_inset(self):
        """When given that the origin should be in the middle of
        the fill, the maze's path should start being drawn from
        the top left of the fill.
        """
        # Expected value.
        exp = np.array([
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
            ],
        ], dtype=np.uint8)
        
        # Test data and state.
        cls = m.Maze
        kwargs = {
            'width': .34,
            'inset': (0, 0, 0),
            'origin': 'tl',
            'unit': (1, 3, 3),
            'seed': 'spam',
        }
        
        # Run test and determine result.
        self.fill_test(exp, cls, kwargs)


class AnimatedMazeTestCase(SourceTestCase):
    def test_animatedmaze_fill(self):
        """When given the size of an array, return an array of that
        size filled with the animation of a maze being created.
        """
        # Expected value.
        exp = np.array([
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
        ], dtype=np.uint8)
        
        # Test data and state.
        cls = m.AnimatedMaze
        kwargs = {
            'width': .34,
            'inset': (0, 1, 1),
            'unit': (1, 3, 3),
            'origin': 'mm',
            'seed': 'spam',
        }
        
        # Run test and determine result.
        self.fill_test(exp, cls, kwargs)

    def test_animatedmaze_fill_with_delay(self):
        """If a delay is given, add that number of empty frames at
        the beginning of the image data.
        """
        # Expected value.
        exp = np.array([
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
        ], dtype=np.uint8)
        
        # Test data and state.
        cls = m.AnimatedMaze
        kwargs = {
            'delay': 2,
            'width': .34,
            'inset': (0, 1, 1),
            'unit': (1, 3, 3),
            'origin': 'mm',
            'seed': 'spam',
        }
        size = (4, 9, 9)
        
        # Run test and determine result.
        self.maxDiff = None
        self.fill_test(exp, cls, kwargs, size)

    def test_animatedmaze_fill_with_linger(self):
        """If a linger is given, add that number of copies of the 
        last frame at the end of the image data.
        """
        # Expected value.
        exp = np.array([
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
        ], dtype=np.uint8)
        
        # Test data and state.
        cls = m.AnimatedMaze
        kwargs = {
            'linger': 2,
            'width': .34,
            'inset': (0, 1, 1),
            'unit': (1, 3, 3),
            'origin': 'mm',
            'seed': 'spam',
        }
        size = (4, 9, 9)
        
        # Run test and determine result.
        self.maxDiff = None
        self.fill_test(exp, cls, kwargs, size)


class SolvedMazeTestCase(SourceTestCase):
    def test_maze_fill(self):
        """When given the size of an array, return an array of that
        size filled with the solution for a maze.
        """
        # Expected value.
        exp = np.array([
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
        ], dtype=np.uint8)
        
        # Test data and state.
        cls = m.SolvedMaze
        kwargs = {
            'width': .34,
            'unit': (1, 3, 3),
            'seed': 'spam',
        }
        
        # Run test and determine result.
        self.fill_test(exp, cls, kwargs)

    def test_maze_fill_with_end(self):
        """When given a end location, enmd the maze solution in
        that location in the maze.
        """
        # Expected value.
        exp = np.array([
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
        ], dtype=np.uint8)
        
        # Test data and state.
        cls = m.SolvedMaze
        kwargs = {
            'end': 'bl',
            'width': .34,
            'unit': (1, 3, 3),
            'seed': 'spam',
        }
        
        # Run test and determine result.
        self.fill_test(exp, cls, kwargs)

    def test_maze_fill_with_start(self):
        """When given a start location, begin the maze solution in
        that location in the maze.
        """
        # Expected value.
        exp = np.array([
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
        ], dtype=np.uint8)
        
        # Test data and state.
        cls = m.SolvedMaze
        kwargs = {
            'start': 'bl',
            'width': .34,
            'unit': (1, 3, 3),
            'seed': 'spam',
        }
        
        # Run test and determine result.
        self.fill_test(exp, cls, kwargs)
