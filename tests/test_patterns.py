"""
test_patterns
~~~~~~~~~~~~~

Unit tests for the rasty.patterns module.
"""
import numpy as np

from rasty import patterns as p
from tests.common import ArrayTestCase, SourceTestCase


# Test cases.
class BoxTestCase(SourceTestCase):
    def test_fill(self):
        """Given a size, Solid.fill should return a volume filled with
        a box of the origin, dimensions, and color given when the
        object was created.
        """
        # Expected values.
        exp = np.array([
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            ],
        ], dtype=np.uint8)

        # Set up test data and state.
        kwargs = {
            'origin': (0, 1, 1),
            'dimensions': (1, 2, 3),
            'color': 0x80 / 0xff,
        }
        pattern = p.Box

        # Run test and determine result.
        self.fill_test(exp, pattern, kwargs)


class GradientTestCase(SourceTestCase):
    def test_gradient_fill(self):
        """Given the size of a space to fill with noise, return an
        array of that size filled with noise.
        """
        # Expected values.
        exp = np.array([
            [
                [0x00, 0x00, 0x00, 0x00],
                [0x7f, 0x7f, 0x7f, 0x7f],
                [0xff, 0xff, 0xff, 0xff],
                [0x7f, 0x7f, 0x7f, 0x7f],
                [0x00, 0x00, 0x00, 0x00],
            ],
            [
                [0x00, 0x00, 0x00, 0x00],
                [0x7f, 0x7f, 0x7f, 0x7f],
                [0xff, 0xff, 0xff, 0xff],
                [0x7f, 0x7f, 0x7f, 0x7f],
                [0x00, 0x00, 0x00, 0x00],
            ],
        ], dtype=np.uint8)

        # Set up test data and state.
        kwargs = {
            'direction': 'v',
            'stops': [0., 0., .5, 1., 1., 0.],
        }
        pattern = p.Gradient

        # Run test and determine result.
        self.fill_test(exp, pattern, kwargs)


class LinesTestCase(SourceTestCase):
    def test_lines_fill(self):
        """Given the size of a space to fill with noise, return an
        array of that size filled with noise.
        """
        # Expected values.
        exp = np.array([
            [
                [0x00, 0x00, 0x00, 0x00],
                [0x7f, 0x7f, 0x7f, 0x7f],
                [0xff, 0xff, 0xff, 0xff],
                [0x7f, 0x7f, 0x7f, 0x7f],
            ],
            [
                [0x7f, 0x7f, 0x7f, 0x7f],
                [0xff, 0xff, 0xff, 0xff],
                [0x7f, 0x7f, 0x7f, 0x7f],
                [0x00, 0x00, 0x00, 0x00],
            ],
        ], dtype=np.uint8)

        # Set up test data and state.
        kwargs = {
            'direction': 'h',
            'length': 5,
        }
        pattern = p.Lines

        # Run test and determine results.
        self.fill_test(exp, pattern, kwargs)


class RaysTestCase(SourceTestCase):
    def test_rays_fill(self):
        """Given a size and location, Ray.fill should return a
        volume filled with rays emanating from a central point.
        """
        # Expected value.
        exp = np.array([
            [
                [0x89, 0x60, 0x2c, 0x13, 0x58, 0x98, 0xcd, 0xf5],
                [0xb1, 0x89, 0x4d, 0x06, 0x66, 0xb9, 0xf5, 0xe0],
                [0xe5, 0xc4, 0x89, 0x18, 0x84, 0xf5, 0xcc, 0xab],
                [0xd8, 0xe5, 0xf9, 0x89, 0xf5, 0x97, 0x79, 0x6b],
                [0x93, 0x85, 0x67, 0x09, 0x75, 0x05, 0x19, 0x26],
                [0x53, 0x32, 0x09, 0x7a, 0xe6, 0x75, 0x3a, 0x19],
                [0x1e, 0x09, 0x45, 0x98, 0xf8, 0xb1, 0x75, 0x4d],
                [0x09, 0x31, 0x66, 0xa6, 0xeb, 0xd2, 0x9e, 0x75],
            ],
        ], dtype=np.uint8)

        # Set up test data and state.
        kwargs = {
            'count': 3,
            'offset': np.pi / 2,
        }
        pattern = p.Rays

        # Run test and determine results.
        self.fill_test(exp, pattern, kwargs)


class RingsTestCase(SourceTestCase):
    def test_ring_fill(self):
        """Given a size and location, Ring.fill should return a
        volume filled with concentric rings.
        """
        # Expected value.
        exp = np.array([
            [
                [0x4f, 0x00, 0x0e, 0xc0, 0xff, 0xc0, 0x0e, 0x00],
                [0x00, 0x83, 0x35, 0x00, 0x00, 0x00, 0x35, 0x83],
                [0x0e, 0x35, 0x00, 0x86, 0xff, 0x86, 0x00, 0x35],
                [0xc0, 0x00, 0x86, 0x00, 0x00, 0x00, 0x86, 0x00],
                [0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00],
                [0xc0, 0x00, 0x86, 0x00, 0x00, 0x00, 0x86, 0x00],
                [0x0e, 0x35, 0x00, 0x86, 0xff, 0x86, 0x00, 0x35],
                [0x00, 0x83, 0x35, 0x00, 0x00, 0x00, 0x35, 0x83],
            ],
        ], dtype=np.uint8)

        # Set up test data and state.
        kwargs = {
            'radius': 2,
            'width': 1,
            'gap': 2,
            'count': 3,
        }
        pattern = p.Rings

        # Run test and determine results.
        self.fill_test(exp, pattern, kwargs)


class SolidTestCase(SourceTestCase):
    def test_fill(self):
        """Given a size and location, Solid.fill should return a
        volume filled with a single color.
        """
        # Expected values.
        exp = np.array([
            [
                [0x40, 0x40, 0x40, 0x40],
                [0x40, 0x40, 0x40, 0x40],
                [0x40, 0x40, 0x40, 0x40],
                [0x40, 0x40, 0x40, 0x40],
            ],
            [
                [0x40, 0x40, 0x40, 0x40],
                [0x40, 0x40, 0x40, 0x40],
                [0x40, 0x40, 0x40, 0x40],
                [0x40, 0x40, 0x40, 0x40],
            ],
        ], dtype=np.uint8)

        # Test data and state.
        kwargs = {
            'color': 0x40 / 0xff,
        }
        pattern = p.Solid

        # Run test and determine results.
        self.fill_test(exp, pattern, kwargs)


class SpheresTestCase(SourceTestCase):
    def test_spheres_fill_x(self):
        """Given a size and location, Spheres.fill should return a
        volume filled a radial gradient.
        """
        # Expected values.
        exp = np.array([
            [
                [0x2e, 0x42, 0x53, 0x60, 0x68, 0x6b, 0x68, 0x60],
                [0x42, 0x58, 0x6b, 0x7b, 0x85, 0x89, 0x85, 0x7b],
                [0x53, 0x6b, 0x82, 0x94, 0xa1, 0xa6, 0xa1, 0x94],
                [0x60, 0x7b, 0x94, 0xab, 0xbd, 0xc4, 0xbd, 0xab],
                [0x68, 0x85, 0xa1, 0xbd, 0xd5, 0xe1, 0xd5, 0xbd],
                [0x6b, 0x89, 0xa6, 0xc4, 0xe1, 0xff, 0xe1, 0xc4],
                [0x68, 0x85, 0xa1, 0xbd, 0xd5, 0xe1, 0xd5, 0xbd],
                [0x60, 0x7b, 0x94, 0xab, 0xbd, 0xc4, 0xbd, 0xab],
            ],
        ], dtype=np.uint8)

        # Set up test data and state.
        kwargs = {
            'radius': 5,
            'offset': 'x',
        }
        pattern = p.Spheres

        # Run test and determine results.
        self.fill_test(exp, pattern, kwargs)

    def test_spheres_fill_y(self):
        """Given a size and location, Spheres.fill should return a
        volume filled a radial gradient.
        """
        # Expected values.
        exp = np.array([
            [
                [0x6b, 0x89, 0xa6, 0xc4, 0xe1, 0xff, 0xe1, 0xc4],
                [0x68, 0x85, 0xa1, 0xbd, 0xd5, 0xe1, 0xd5, 0xbd],
                [0x60, 0x7b, 0x94, 0xab, 0xbd, 0xc4, 0xbd, 0xab],
                [0x53, 0x6b, 0x82, 0x94, 0xa1, 0xa6, 0xa1, 0x94],
                [0x42, 0x58, 0x6b, 0x7b, 0x85, 0x89, 0x85, 0x7b],
                [0x2e, 0x42, 0x53, 0x60, 0x68, 0x6b, 0x68, 0x60],
                [0x42, 0x58, 0x6b, 0x7b, 0x85, 0x89, 0x85, 0x7b],
                [0x53, 0x6b, 0x82, 0x94, 0xa1, 0xa6, 0xa1, 0x94],
            ],
        ], dtype=np.uint8)

        # Set up test data and state.
        kwargs = {
            'radius': 5,
            'offset': 'y',
        }
        pattern = p.Spheres

        # Run test and determine results.
        self.fill_test(exp, pattern, kwargs)


class SpotTestCase(SourceTestCase):
    def test_spot_fill(self):
        """Given a size and location, Spot.fill should return a
        volume filled with a spot of color.
        """
        # Expected values.
        exp = np.array([
            [
                [0x32, 0x4a, 0x5d, 0x6a, 0x6e, 0x6a, 0x5d, 0x4a],
                [0x4a, 0x66, 0x7c, 0x8c, 0x92, 0x8c, 0x7c, 0x66],
                [0x5d, 0x7c, 0x99, 0xae, 0xb6, 0xae, 0x99, 0x7c],
                [0x6a, 0x8c, 0xae, 0xcc, 0xda, 0xcc, 0xae, 0x8c],
                [0x6e, 0x92, 0xb6, 0xda, 0xff, 0xda, 0xb6, 0x92],
                [0x6a, 0x8c, 0xae, 0xcc, 0xda, 0xcc, 0xae, 0x8c],
                [0x5d, 0x7c, 0x99, 0xae, 0xb6, 0xae, 0x99, 0x7c],
                [0x4a, 0x66, 0x7c, 0x8c, 0x92, 0x8c, 0x7c, 0x66],
            ],
        ], dtype=np.uint8)

        # Set up test data and state.
        kwargs = {
            'radius': 5,
        }
        pattern = p.Spot

        # Run test and determine results.
        self.fill_test(exp, pattern, kwargs)


class TextTestCase(SourceTestCase):
    def test_text_fill(self):
        """Given a size and location, Text.fill should return a
        volume with the configured text.
        """
        # Expected values.
        exp = np.array([
            [
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x0b, 0x50, 0x2c, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x8e, 0x33, 0x3c, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x29, 0x8a, 0x74, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x61, 0x6f, 0x8a, 0x00, 0x00],
                [0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00],
            ],
        ], dtype=np.uint8)

        # Set up test data and state.
        kwargs = {
            'text': 's',
            'size': 6,
            'origin': (3, 0),
        }
        pattern = p.Text

        # Run test and determine results.
        self.fill_test(exp, pattern, kwargs)


class WaveTestCase(SourceTestCase):
    def test_waves_fill(self):
        """Waves.fill should return a series of concentric rings."""
        # Expected value.
        exp = np.array([
            [
                [0x4c, 0x21, 0x75, 0xa3, 0xa3, 0x75, 0x21, 0x4c],
                [0x21, 0xa3, 0xf0, 0xb2, 0xb2, 0xf0, 0xa3, 0x21],
                [0x75, 0xf0, 0x69, 0x0d, 0x0d, 0x69, 0xf0, 0x75],
                [0xa3, 0xb2, 0x0d, 0x86, 0x86, 0x0d, 0xb2, 0xa3],
                [0xa3, 0xb2, 0x0d, 0x86, 0x86, 0x0d, 0xb2, 0xa3],
                [0x75, 0xf0, 0x69, 0x0d, 0x0d, 0x69, 0xf0, 0x75],
                [0x21, 0xa3, 0xf0, 0xb2, 0xb2, 0xf0, 0xa3, 0x21],
                [0x4c, 0x21, 0x75, 0xa3, 0xa3, 0x75, 0x21, 0x4c],
            ],
        ], dtype=np.uint8)

        # Set up test data and state.
        pattern = p.Waves
        kwargs = {
            'length': 3,
            'growth': 'l',
        }

        # Run test and determine results.
        self.fill_test(exp, pattern, kwargs)
